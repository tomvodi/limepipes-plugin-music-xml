// Code generated by "enumer -json -yaml -transform=lower -type=BeamType"; DO NOT EDIT.

package model

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _BeamTypeName = "begincontinueend"

var _BeamTypeIndex = [...]uint8{0, 5, 13, 16}

const _BeamTypeLowerName = "begincontinueend"

func (i BeamType) String() string {
	if i >= BeamType(len(_BeamTypeIndex)-1) {
		return fmt.Sprintf("BeamType(%d)", i)
	}
	return _BeamTypeName[_BeamTypeIndex[i]:_BeamTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BeamTypeNoOp() {
	var x [1]struct{}
	_ = x[Begin-(0)]
	_ = x[Continue-(1)]
	_ = x[End-(2)]
}

var _BeamTypeValues = []BeamType{Begin, Continue, End}

var _BeamTypeNameToValueMap = map[string]BeamType{
	_BeamTypeName[0:5]:        Begin,
	_BeamTypeLowerName[0:5]:   Begin,
	_BeamTypeName[5:13]:       Continue,
	_BeamTypeLowerName[5:13]:  Continue,
	_BeamTypeName[13:16]:      End,
	_BeamTypeLowerName[13:16]: End,
}

var _BeamTypeNames = []string{
	_BeamTypeName[0:5],
	_BeamTypeName[5:13],
	_BeamTypeName[13:16],
}

// BeamTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BeamTypeString(s string) (BeamType, error) {
	if val, ok := _BeamTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BeamTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to BeamType values", s)
}

// BeamTypeValues returns all values of the enum
func BeamTypeValues() []BeamType {
	return _BeamTypeValues
}

// BeamTypeStrings returns a slice of all String values of the enum
func BeamTypeStrings() []string {
	strs := make([]string, len(_BeamTypeNames))
	copy(strs, _BeamTypeNames)
	return strs
}

// IsABeamType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i BeamType) IsABeamType() bool {
	for _, v := range _BeamTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for BeamType
func (i BeamType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for BeamType
func (i *BeamType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("BeamType should be a string, got %s", data)
	}

	var err error
	*i, err = BeamTypeString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for BeamType
func (i BeamType) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for BeamType
func (i *BeamType) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = BeamTypeString(s)
	return err
}
