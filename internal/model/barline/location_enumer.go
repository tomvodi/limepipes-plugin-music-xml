// Code generated by "enumer -json -yaml -transform=lower -type=Location"; DO NOT EDIT.

package barline

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _LocationName = "leftright"

var _LocationIndex = [...]uint8{0, 4, 9}

const _LocationLowerName = "leftright"

func (i Location) String() string {
	if i >= Location(len(_LocationIndex)-1) {
		return fmt.Sprintf("Location(%d)", i)
	}
	return _LocationName[_LocationIndex[i]:_LocationIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LocationNoOp() {
	var x [1]struct{}
	_ = x[Left-(0)]
	_ = x[Right-(1)]
}

var _LocationValues = []Location{Left, Right}

var _LocationNameToValueMap = map[string]Location{
	_LocationName[0:4]:      Left,
	_LocationLowerName[0:4]: Left,
	_LocationName[4:9]:      Right,
	_LocationLowerName[4:9]: Right,
}

var _LocationNames = []string{
	_LocationName[0:4],
	_LocationName[4:9],
}

// LocationString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LocationString(s string) (Location, error) {
	if val, ok := _LocationNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LocationNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Location values", s)
}

// LocationValues returns all values of the enum
func LocationValues() []Location {
	return _LocationValues
}

// LocationStrings returns a slice of all String values of the enum
func LocationStrings() []string {
	strs := make([]string, len(_LocationNames))
	copy(strs, _LocationNames)
	return strs
}

// IsALocation returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Location) IsALocation() bool {
	for _, v := range _LocationValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Location
func (i Location) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Location
func (i *Location) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Location should be a string, got %s", data)
	}

	var err error
	*i, err = LocationString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Location
func (i Location) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Location
func (i *Location) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = LocationString(s)
	return err
}
