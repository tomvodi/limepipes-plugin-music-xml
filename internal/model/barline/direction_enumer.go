// Code generated by "enumer -json -yaml -transform=lower -type=Direction"; DO NOT EDIT.

package barline

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _DirectionName = "forwardbackward"

var _DirectionIndex = [...]uint8{0, 7, 15}

const _DirectionLowerName = "forwardbackward"

func (i Direction) String() string {
	if i >= Direction(len(_DirectionIndex)-1) {
		return fmt.Sprintf("Direction(%d)", i)
	}
	return _DirectionName[_DirectionIndex[i]:_DirectionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _DirectionNoOp() {
	var x [1]struct{}
	_ = x[Forward-(0)]
	_ = x[Backward-(1)]
}

var _DirectionValues = []Direction{Forward, Backward}

var _DirectionNameToValueMap = map[string]Direction{
	_DirectionName[0:7]:       Forward,
	_DirectionLowerName[0:7]:  Forward,
	_DirectionName[7:15]:      Backward,
	_DirectionLowerName[7:15]: Backward,
}

var _DirectionNames = []string{
	_DirectionName[0:7],
	_DirectionName[7:15],
}

// DirectionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func DirectionString(s string) (Direction, error) {
	if val, ok := _DirectionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _DirectionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Direction values", s)
}

// DirectionValues returns all values of the enum
func DirectionValues() []Direction {
	return _DirectionValues
}

// DirectionStrings returns a slice of all String values of the enum
func DirectionStrings() []string {
	strs := make([]string, len(_DirectionNames))
	copy(strs, _DirectionNames)
	return strs
}

// IsADirection returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Direction) IsADirection() bool {
	for _, v := range _DirectionValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for Direction
func (i Direction) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for Direction
func (i *Direction) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("Direction should be a string, got %s", data)
	}

	var err error
	*i, err = DirectionString(s)
	return err
}

// MarshalYAML implements a YAML Marshaler for Direction
func (i Direction) MarshalYAML() (interface{}, error) {
	return i.String(), nil
}

// UnmarshalYAML implements a YAML Unmarshaler for Direction
func (i *Direction) UnmarshalYAML(unmarshal func(interface{}) error) error {
	var s string
	if err := unmarshal(&s); err != nil {
		return err
	}

	var err error
	*i, err = DirectionString(s)
	return err
}
