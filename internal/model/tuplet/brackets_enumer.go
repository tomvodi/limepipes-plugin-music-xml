// Code generated by "enumer -transform=lower -type=Brackets"; DO NOT EDIT.

package tuplet

import (
	"fmt"
	"strings"
)

const _BracketsName = "nobracketsnoyes"

var _BracketsIndex = [...]uint8{0, 10, 12, 15}

const _BracketsLowerName = "nobracketsnoyes"

func (i Brackets) String() string {
	if i >= Brackets(len(_BracketsIndex)-1) {
		return fmt.Sprintf("Brackets(%d)", i)
	}
	return _BracketsName[_BracketsIndex[i]:_BracketsIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _BracketsNoOp() {
	var x [1]struct{}
	_ = x[NoBrackets-(0)]
	_ = x[No-(1)]
	_ = x[Yes-(2)]
}

var _BracketsValues = []Brackets{NoBrackets, No, Yes}

var _BracketsNameToValueMap = map[string]Brackets{
	_BracketsName[0:10]:       NoBrackets,
	_BracketsLowerName[0:10]:  NoBrackets,
	_BracketsName[10:12]:      No,
	_BracketsLowerName[10:12]: No,
	_BracketsName[12:15]:      Yes,
	_BracketsLowerName[12:15]: Yes,
}

var _BracketsNames = []string{
	_BracketsName[0:10],
	_BracketsName[10:12],
	_BracketsName[12:15],
}

// BracketsString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func BracketsString(s string) (Brackets, error) {
	if val, ok := _BracketsNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _BracketsNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Brackets values", s)
}

// BracketsValues returns all values of the enum
func BracketsValues() []Brackets {
	return _BracketsValues
}

// BracketsStrings returns a slice of all String values of the enum
func BracketsStrings() []string {
	strs := make([]string, len(_BracketsNames))
	copy(strs, _BracketsNames)
	return strs
}

// IsABrackets returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Brackets) IsABrackets() bool {
	for _, v := range _BracketsValues {
		if i == v {
			return true
		}
	}
	return false
}
